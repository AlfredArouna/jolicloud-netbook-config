#!/bin/sh
######################################################################
# eeepc v1.1 by Ferry Hendrikx (ferry.hendrikx@gmail.com), (c) 2008
#
# System script that automatically configures the appropriate modules
# depending on the Asus Eee PC model number. This script will only
# work on Asus equipment.
#
# The script needs to modify /etc/modules before it is loaded at boot
# time. However, the FS is still R/O at this point, so instead we run 
# this script at reboot/shutdown and the modules will get loaded on 
# next boot.
#
# This script will remove itself from the boot process once it has
# configured your /etc/modules.
######################################################################
### BEGIN INIT INFO
# Provides:          eeepc
# Required-Start:
# Required-Stop:
# Default-Start:     0 6
# Default-Stop:
# Short-Description: Asus Eee PC module configuration
# Description:
### END INIT INFO

set -e

NAME="eeepc"
DESC="Asus Eee PC module configuration"

DMI_DEC='/usr/sbin/dmidecode'
MODULES='/etc/modules'

. /lib/lsb/init-functions

do_stop () {
	# continue only if we're running on an ASUSTeK PC

	if [ `${DMI_DEC} -s system-manufacturer | grep -i asustek | wc -l` -eq 1 ]; then

		# continue only if we're running a non-generic kernel

		if [ `uname -a | grep -i generic | wc -l` -eq 0 ]; then

			# log

			log_action_begin_msg "Starting $DESC"


			# modules already configured?

			if [ `grep eeepc ${MODULES} | wc -l` -eq 0 ]; then

				# backup configuration

				if [ -e "${MODULES}" ]; then
					cp -a ${MODULES} ${MODULES}.orig
				fi


				# configure modules

				PRODUCT=`${DMI_DEC} -s system-product-name`

				echo "ath_pci" >> ${MODULES}
				echo "pciehp pciehp_debug=1 pciehp_force=1" >> ${MODULES}
				echo "eeepc_acpi" >> ${MODULES}

				if [ "${PRODUCT}" = "900" -o "${PRODUCT}" = "901" ]; then
					echo "snd_hda_intel model=auto" >> ${MODULES}
				else
					echo "snd_hda_intel model=3stack-dig" >> ${MODULES}
				fi

				echo "p4_clockmod" >> ${MODULES}
			fi


			# log

			log_action_end_msg $?
		fi
	fi


	# stop this script from running in the future

	update-rc.d -f $NAME remove >/dev/null
}

case "$1" in
	start)
		# No-op
		;;
	restart|reload|force-reload)
		echo "Error: argument '$1' not supported" >&2
		exit 3
		;;
	stop)
		do_stop
		;;
	*)
		echo "Usage: $0 [start|stop]" >&2
		exit 3
		;;
esac

:
